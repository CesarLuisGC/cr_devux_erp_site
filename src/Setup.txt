/*
|--------------------------------------------------------------------------
| Creación de aplicación Laravel
|--------------------------------------------------------------------------
*/
composer create-project laravel/laravel erp --prefer-dist

/*
|--------------------------------------------------------------------------
| Creación de estructura de carpetas para arquitectura limpia DDD / Hexagonal
|--------------------------------------------------------------------------
| https://www.youtube.com/watch?v=hCw1hqnVAjw&list=PLf5ATZslqO1fCeWclli2zOJx5mcVua6Yi&index=1
*/

-En la raíz del proyecto, en el archivo composer.json agregar el ambito de SRC ("Src\\": "src/",) en la sección
autoload.

"autoload": {
"psr-4": {
"App\\": "app/",
"Src\\": "src/", /** Aquí */
"Database\\Factories\\": "database/factories/",
"Database\\Seeders\\": "database/seeders/"
}
},

/*
|--------------------------------------------------------------------------
| Desarrollo de Multi Tenencia personalizado - Sin Paquetes
|--------------------------------------------------------------------------
| https://www.youtube.com/watch?v=hCw1hqnVAjw&list=PLf5ATZslqO1fCeWclli2zOJx5mcVua6Yi&index=1
*/

#Agregar nuevas conexiones en Config/Database (landlord y tenant) y dejar por defecto la DB landlord ( 'default' => env('DB_CONNECTION', 'landlord'),).
#Crear carpetas de separación de entornos, Landlord y Tenant, acá se alojaran los rescpetivos middleawarees, se deben pasar las migraciones base en ambas carpetas.

php artisan make:migration create_tenants_table --path=/database/migrations/Landlord

php artisan make:model Landlord/Modules/System/Security/Tenant

php artisan session:table

php artisan make:middleware TenantMiddleware

php artisan make:command Landlord/MigrateCommand
php artisan make:command Landlord/SeederCommand
php artisan make:command Tenant/MigrateCommand
php artisan make:command Tenant/SeederCommand
php artisan make:command Tenant/InitializetCommand

php artisan make:seeder Landlord/TestSeeder
php artisan make:seeder Tenant/TestSeeder
php artisan make:seeder Tenant/InitializetSeeder

En el archivo App\Http\kernel.php agregar el middleaware al arreglo de Aliases
protected $middlewareAliases = [
'tenant' => \App\Http\Middleware\TenantMiddleware::class, //Aquí
];

Luego en el archivo App\Providers\RouteServiceProvider.php agregar el middleaware creado al metodo root que maneja las
rutas
$this->routes(function () {
Route::middleware(['web', 'tenant']) //Aquí
->group(base_path('routes/web.php'));
});

En la carpeta principal de APP, crear una carpeta llamada "Services",
acá crearemos una clase llamada TenantService.php que brindará el servicio de cambio de base de datos según el tenant.

RUTAS, en la carpeta de rutas crearemos un nuevo archivo de rutas llamado Tenant.

/*
|--------------------------------------------------------------------------
| Desarrollo de autenticación personalizada - Sin Paquetes
|--------------------------------------------------------------------------
| https://www.allphptricks.com/laravel-custom-user-registration-and-login-tutorial/
*/
php artisan make:controller App/Http/Controllers/Tenant/Modules/System/Security/AuthController --resource
php artisan make:controller App/Http/Controllers/Landlord/Modules/System/Security/AuthController --resource

Se crean y se agregan las vistas de login y registro de tentants y landlord.


/*
|--------------------------------------------------------------------------
| Instalación de paquetes
|--------------------------------------------------------------------------
*/

https://tenancyforlaravel.com/docs/v3/quickstart

https://livewire.laravel.com/docs/quickstart
composer require livewire/livewire
php artisan livewire:publish --config

https://spatie.be/docs/laravel-permission/v5/installation-laravel
composer require spatie/laravel-permission

Optional: The service provider will automatically get registered. Or you may manually add the service provider in your
config/app.php file:
'providers' => [
// ...
Spatie\Permission\PermissionServiceProvider::class,
];

php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
php artisan config:clear
php artisan route:cache
php artisan view:cache
php artisan optimize:clear

